<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
                     http://www.springframework.org/schema/beans/spring-beans.xsd 
                     http://www.springframework.org/schema/tx 
                     http://www.springframework.org/schema/tx/spring-tx.xsd 
                     http://www.springframework.org/schema/aop 
                     http://www.springframework.org/schema/aop/spring-aop.xsd ">

	<bean
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations" value="classpath:jdbc.properties" />
	</bean>

	<bean id="MyDataSource" destroy-method="close"
		class="org.apache.commons.dbcp.BasicDataSource">
		<property name="driverClassName" value="${jdbc.driverClassName}" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
		<property name="validationQuery" value="${jdbc.validate}"></property>
		<property name="maxActive" value="20"></property>
	</bean>
	<bean id="vendorProperties" class="org.springframework.beans.factory.config.PropertiesFactoryBean">
		<property name="properties">
			<props>
				<prop key="SQL Server">sqlserver</prop>
				<prop key="Oracle">oracle</prop>
				<prop key="MySQL">mysql</prop>
			</props>
		</property>
	</bean>

	<bean id="databaseIdProvider" class="org.apache.ibatis.mapping.VendorDatabaseIdProvider">
		<property name="properties" ref="vendorProperties"/>
	</bean>

	<!-- SqlSessionFactory -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="MyDataSource" />
        <property name="databaseIdProvider" ref="databaseIdProvider" />
	</bean>
	<!-- ScanMapperFiles -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.xdlv.weixing.bean" />
	</bean>

	<bean name="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="MyDataSource"></property>
	</bean>

	<tx:advice id="userTxAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="delete*" propagation="REQUIRED" read-only="false"
				rollback-for="java.lang.Exception" no-rollback-for="java.lang.RuntimeException" />
			<tx:method name="save*" propagation="REQUIRED" read-only="false"
				rollback-for="java.lang.RuntimeException" />
			<tx:method name="update*" propagation="REQUIRED" read-only="false"
				rollback-for="java.lang.Exception" />
			<tx:method name="insert*" propagation="REQUIRED" read-only="false"
				rollback-for="java.lang.Exception" />
			<tx:method name="find*" propagation="SUPPORTS" />
			<tx:method name="get*" propagation="SUPPORTS" />
			<tx:method name="select*" propagation="SUPPORTS" />
		</tx:attributes>
	</tx:advice>

	<aop:config>
		<aop:pointcut id="pc"
			expression="execution(public * com.xdlv.weixing.service.*.*(..))" />
		<aop:advisor pointcut-ref="pc" advice-ref="userTxAdvice" />
	</aop:config>

	
	<bean class="com.xdlv.weixing.service.impl.UserSerivceImpl" autowire="byType" />
	<bean class="com.xdlv.weixing.service.impl.FwServiceImpl" autowire="byType" />
	<bean name="UserAction" class="com.xdlv.weixing.action.UserAction" scope="prototype" autowire="byType" />
	<bean name="FwUserAction" class="com.xdlv.weixing.action.FwUserAction" scope="prototype" autowire="byType" />
	<bean name="WeiXingAction" class="com.xdlv.weixing.action.WeiXingAction" scope="prototype" autowire="byType" />

	<bean name="ImportAction" class="com.xdlv.weixing.action.ImportAction" scope="prototype" autowire="byType" />

    <bean name="UserCompanyAction" class="com.xdlv.weixing.action.UserCompanyAction" scope="prototype" autowire="byType"/>
	<bean name="ImportDzRecordAction" class="com.xdlv.weixing.action.ImportDzRecordAction" scope="prototype" autowire="byType"/>

    <bean name="DzListAction" class="com.xdlv.weixing.action.DzlistAction" scope="prototype" autowire="byType"/>

	<!-- Handler list -->
	<bean name="subscribeHandler" class="com.xdlv.weixing.action.handler.SubscribeHandler" autowire="byType"/>
	<bean name="unSubscribeHandler" class="com.xdlv.weixing.action.handler.UnSubscribeHandler" autowire="byType"/>

	<!-- Job list -->
	<bean id="sendSmsMessage" class="com.xdlv.weixing.job.SendSmsMessage" 
		  autowire="byType" />
    <bean id="notifyMessage" class="com.xdlv.weixing.job.NotifyMessage"
          autowire="byType" />
    <bean id="refreshAccessToken" class="com.xdlv.weixing.job.RefreshAccessToken"
          autowire="byType" />


    <bean id="refreshAccessTokenJobDetail"
          class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
        <property name="targetObject">
            <ref bean="refreshAccessToken" />
        </property>
        <property name="targetMethod">
            <value>execute</value>
        </property>
        <property name="concurrent">
            <value>false</value>
        </property>
    </bean>
    <bean id="refreshAccessTokenDoTime"
          class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
        <property name="jobDetail">
            <ref bean="refreshAccessTokenJobDetail" />
        </property>

        <property name="cronExpression">
            <value>0 0/110 * * * ?</value>
        </property>
    </bean>

	<bean id="sendSmsMessageJobDetail"
		class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
		<property name="targetObject">
			<ref bean="sendSmsMessage" />
		</property>
		<property name="targetMethod">
			<value>execute</value>
		</property>
		<property name="concurrent">
			<value>false</value>
		</property>
	</bean>
	
	<bean id="sendSmsMessageDoTime"
		class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
		<property name="jobDetail">
			<ref bean="sendSmsMessageJobDetail" />
		</property>
		
		<property name="cronExpression">
			<value>0/5 * * * * ?</value>
		</property>
	</bean>

	<bean id="notifyMessageJobDetail"
		  class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
		<property name="targetObject">
			<ref bean="notifyMessage" />
		</property>
		<property name="targetMethod">
			<value>execute</value>
		</property>
		<property name="concurrent">
			<value>false</value>
		</property>
	</bean>

    <bean id="notifyMessageDoTime"
          class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
        <property name="jobDetail">
            <ref bean="notifyMessageJobDetail" />
        </property>

        <property name="cronExpression">
            <value>0/30 * * * * ?</value>
        </property>
    </bean>

	<bean id="startQuertz" lazy-init="false" autowire="no"
		class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
		<property name="triggers">
			<list>
				<ref bean="sendSmsMessageDoTime" />
                <ref bean="notifyMessageDoTime" />
                <ref bean="refreshAccessTokenDoTime" />
			</list>
		</property>
	</bean>

</beans>